#!/usr/bin/env bash

# Slurm batch queue:
# Show the current batch jobs status broken down into userids.
# Can also show per-user or per-account status.

# Author: Ole H. Nielsen, Technical University of Denmark
# E-mail: Ole.H.Nielsen@fysik.dtu.dk
# Home page: https://github.com/OleHolmNielsen/Slurm_tools

# Command usage:
function usage()
{
cat <<EOF
Usage: $0 [-u username] [-a account] [-p partition] [-P] [-q QOS] [-r] [-A] [-C] [-h]
where:
	-u username: Print only user <username>
	-a account: Print only jobs in Slurm account <account>
	-A: Print only ACCT_TOTAL lines
	-C: Print comma separated lines for Excel
	-p partition: Print only jobs in partition <partition-list>
	-P: Include all partitions, including hidden and unavailable ones
	-q qos-list: Print only jobs in QOS <qos-list>
	-r: Print additional job Reason columns
	-h: Print this help information
EOF
}

# Set the maximum length of user and account names (a minimum of 11 to fit the *_TOTAL strings)
export maxlu=11		# Usernames
export maxla=7		# Account names
# Set the percentage of MaxJobCount above which we print a warning.
export maxjobpercent=80
# By default sinfo does not show hidden and unavailable partitions
export all_partitions=""

# Temporary file for headers
TMPFILE=/tmp/showuserjobs.$$
rm -f $TMPFILE

#
# Process command arguments
#
export account_totals_only=0
export comma_separated=0
export SORT_SEP=""
export reason_print=0
export account=""

while getopts "u:a:Pp:q:ACrh" options; do
	case $options in
		u ) 	export username=$OPTARG
			echo Select only user $username >> $TMPFILE
			;;
		a ) 	export account=$OPTARG
			echo Select only users in account $account >> $TMPFILE
			;;
		A ) 	export account_totals_only=1
			echo Select only ACCT_TOTAL lines >> $TMPFILE
			;;
		C ) 	export comma_separated=1
			export SORT_SEP="-t ,"
			;;
		p ) 	export partition="-p $OPTARG"
			if test -z "`sinfo -h -O Partition $partition`"
			then
				echo "ERROR: Partition $OPTARG does not exist on this cluster"
				exit 1
			fi
			echo Print only jobs in partition $OPTARG >> $TMPFILE
			;;
		P ) 	export all_partitions="--all"
			;;
		q ) 	export qoslist="-q $OPTARG"
			if test -z "`sacctmgr -n show qos $OPTARG`"
			then
				echo "ERROR: QOS $OPTARG does not exist on this cluster"
				exit 1
			fi
			echo Print only jobs in QOS $OPTARG >> $TMPFILE
			;;
		r ) 	export reason_print=1
			echo "Print additional job Reason columns (see 'man squeue'):" >> $TMPFILE
			echo "    Priority:   Waiting for resources or higher priority jobs" >> $TMPFILE
			echo "    Dependency: Waiting for a dependent job to complete" >> $TMPFILE
			echo "    CpuLimit:   AssocGrpCpuLimit, AssocGrpCPURunMinutesLimit" >> $TMPFILE
			echo "    Held:       JobHeldUser, JobHeldAdmin" >> $TMPFILE
			;;
		h|? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done

# WARNING: GNU gawk version 4.0 or later is required for arrays of arrays
awk_version=`awk --version | head -1 | awk '{version=$3; split(version,v,"."); print v[1]}'`
if test "$awk_version" = "3"
then
	echo -n "Sorry, gawk version 4.0 or later is required.  Your version is: "
	awk --version | head -1
	exit 1
fi

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

SYSTEMNAME=`scontrol show config | grep ClusterName | awk '{print $3}'`
echo Batch job status for cluster $SYSTEMNAME at `date` >> $TMPFILE

#
# Print a nodes state summary
#

# Count the nodes and CPUs:
# Output: Nodename cpus partition state
# Was: sinfo --noheader -N $partition -o  "%N %c %P %6t" | awk '
sinfo --noheader -N $all_partitions $partition -O NodeList,CPUs,Partition,StateLong:30| awk '
{
	node = $1
	if (hostname[node] != "") next		# Nodes in multiple partitions are counted once only
	hostname[node] = node
	total_node++
	cpus[node] = $2
	total_cpus += cpus[node]
	partition[node] = $3
	s = $4
	gsub("*", "", s)	# Strip "*" from nodename in default partition
	state[node] = s
	nodestates[s] = s
	nodecount[s]++
	cpucount[s] += cpus[node]
} END {
	print " "
	print "Node states summary:"
	format = "%-10s %5d nodes (%6.2f%%) %6d CPUs (%6.2f%%)\n"

	# Sort arrays by element values:
	# https://www.gnu.org/software/gawk/manual/html_node/Controlling-Scanning.html
	PROCINFO["sorted_in"] = "@val_type_asc"

	for (i in nodestates) {
		s =  nodestates[i]
		printf(format, s, nodecount[s], (100*nodecount[s]/total_node),  cpucount[s], (100*cpucount[s]/total_cpus))
	}
	printf(format, "Total", total_node, 100.0, total_cpus, 100.0)
}' >> $TMPFILE

#
# Print a job summary
#
export NUMJOBS=`squeue -h -O JobID | wc -l`
export MAXJOBCOUNT=`scontrol show config | grep MaxJobCount | awk '{print $3}'`
echo >> $TMPFILE
echo "Job summary: $NUMJOBS jobs total (max=$MAXJOBCOUNT) in all partitions." >> $TMPFILE
# Check if NUMJOBS exceeds 80% of the maximum:
if (( NUMJOBS > maxjobpercent*MAXJOBCOUNT/100 ))
then
	echo "*** WARNING: *** The number of jobs is getting close to the MaxJobCount limit in slurm.conf." >> $TMPFILE
fi

# Calculate the maximum length of all usernames and account names for proper formatting below
eval `sacctmgr -snrp show user format="User,Account" | awk -F'|' '
BEGIN {
	maxlu = ENVIRON["maxlu"]
	maxla = ENVIRON["maxla"]
}
{
	if (length($1) > maxlu) maxlu = length($1)
	if (length($2) > maxla) maxla = length($2)
} END {
	print "export maxlu=" maxlu
	print "export maxla=" maxla
}'`

# Print a header
if test $comma_separated -ne 1
then
	cat $TMPFILE
	rm -f $TMPFILE
fi

echo | awk '
BEGIN {
	maxlu=ENVIRON["maxlu"]
	maxla=ENVIRON["maxla"]
	comma_separated=ENVIRON["comma_separated"]
	reason_print=ENVIRON["reason_print"]
	line="============================="
	if (comma_separated!=1)
		print " "
	if (reason_print==0) {
		# Output line format string
		if (comma_separated==1)
			fmt="%s,%s,%s,%s,%s,%s,%s,%s\n"
		else
			fmt = sprintf("%%-%d.%ds %%-%d.%ds %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%s\n",
				maxlu, maxlu, maxla, maxla)
		printf (fmt, "Username/", "", "Running", "", "Limit", "Pending", "", "")
		printf (fmt, "Totals", "Account", "Jobs", "CPUs", "CPUs", "Jobs", "CPUs", "Further info")
		if (comma_separated!=1)
			printf (fmt, line, line, line, line, line, line, line, line)
	} else {
		# Additional columns for job reasons
		if (comma_separated==1)
			reasonfmt="%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n"
		else
			reasonfmt = sprintf("%%-%d.%ds %%-%d.%ds %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%6.6s %%s\n",
				maxlu, maxlu, maxla, maxla)
		printf (reasonfmt, "Username/", "", "Running", "", "Limit", "Pending", "",
			"Priority", "", "Dependency", "", "CpuLimit", "", "Held", "", "")
		printf (reasonfmt, "Totals", "Account", 
			"Jobs", "CPUs", "CPUs", "Jobs", "CPUs",
			"Jobs", "CPUs", "Jobs", "CPUs", "Jobs", "CPUs", "Jobs", "CPUs",
			"Further info")
		if (comma_separated!=1)
			printf (reasonfmt, line, line, line, line, line, line,
				line, line, line, line, line, line, line, line,
				line, line)
	}
}'

squeue $all_partitions $partition $qoslist -h -O "UserName,Account,State:10 ,NumNodes:6 ,NumCPUs:6 ,Partition,Reason" | awk '
BEGIN {
	uname=ENVIRON["username"]
	gname=ENVIRON["account"]
	maxlu=ENVIRON["maxlu"]
	maxla=ENVIRON["maxla"]
	comma_separated=ENVIRON["comma_separated"]
	account_totals_only=ENVIRON["account_totals_only"]
	reason_print=ENVIRON["reason_print"]
	# Then get the list of user full names from passwd lines
	# while ("getent.ldap passwd" | getline ) {
	# 	split($0,b,":")		# Split password line into fields
	# 	username[b[1]] = b[1]	# Username b[1]
	# 	fullname[b[1]] = b[5]	# Full name b[5] of this username (b[1])
	# }
	
	# close("getent.ldap passwd")
	# if (length(uname)>0) {		# Select username
	# 	for (u in username) {
	# 		if (u == uname) userselect=1	# User found
	# 	}
	# 	if (userselect != 1) {
	# 		printf("ERROR: Username %s is not in password file\n", uname)
	# 		errorexit = -1
	# 	}
	# }
	if (length(uname)>0) {		# Select username
			userselect=1	# User found
	}
	# Read list of existing accounts (parseable output)
	# and get the user cpu limits from the Slurm database
	command="sacctmgr -snrP show associations format=user,account,GrpTRES"
	FS="|"	# Set the Field Separatator to | for the account list
	while ((command | getline) > 0) {
		# $1=user, $2=account, $3=GrpTRES
		if ($1 == "") $1 = "ACCT_TOTAL"		# Account GrpTRES when user field is empty
		# Split a comma-separated GrpTRES string in $3 and find cpu=NNN limit
		split($3, array, ",")
		for (i in array) {
			if (sub("cpu=", "", array[i]) == 1) {	# Got the cpu=NNN field
				cpulimits[$1][$2] = array[i]
			}
		}
		# Debug: print "Got user " $0 " GrpTRES=" $3 " CPU limit=" cpulimits[$1][$2]
		delete array
	}
	close(command)
	FS=" "	# Reset the Field Separatator to space for the input file

	if (errorexit != 0) exit errorexit	# Will jump to END section
}

{
	# Process the job list
	userid=$1
	account=$2
	status=$3
	nnodes=$4
	nprocs=$5
	partition=$6
	reason=$7
	if (userselect > 0 && uname !~ userid) next	# Select specified username only
	userlist[userid][account] = userid
	accountlist[userid][account] = account
	if (cpulimits[userid][account] == "") cpulimits[userid][account]	= "Inf"	# The default limit

	if (status == "RUNNING" ) {
		running[userid][account]++
		totalrun++
		runprocs[userid][account] += nprocs
		totalrunprocs += nprocs
	} else {
		# PENDING jobs
		idle[userid][account]++
		idleprocs[userid][account] += nprocs
		totalidle++
		totalidleprocs += nprocs
		if (reason_print == 1) {
			if (reason == "Dependency") {
				Dependency[userid][account]++
				Dependency_procs[userid][account] += nprocs
				totalDependency++
				totalDependency_procs += nprocs
			} else if (reason == "Resources" || reason == "Priority") {
				Priority[userid][account]++
				Priority_procs[userid][account] += nprocs
				totalPriority++
				totalPriority_procs += nprocs
			} else if (reason == "AssocGrpCpuLimit" || reason == "AssocGrpCPURunMinutesLimit") {
				CpuLimit[userid][account]++
				CpuLimit_procs[userid][account] += nprocs
				totalCpuLimit++
				totalCpuLimit_procs += nprocs
			} else if (reason == "JobHeldUser" || reason == "JobHeldAdmin") {
				Held[userid][account]++
				Held_procs[userid][account] += nprocs
				totalHeld++
				totalHeld_procs += nprocs
			}
		}
	}
	
} END {
	if (errorexit != 0) exit errorexit	# Error encountered
	# Output line format string
	if (comma_separated==1)
		fmt = "%s,%s,%d,%d,%s,%d,%d,%s\n"
	else
		fmt = sprintf("%%-%d.%ds %%-%d.%ds %%6d %%6d %%6.6s %%6d %%6d %%s\n",
			maxlu, maxlu, maxla, maxla)
	# Additional columns for job reasons
	if (comma_separated==1)
		reasonfmt = "%s,%s,%d,%d,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%s\n"
	else
		reasonfmt = sprintf("%%-%d.%ds %%-%d.%ds %%6d %%6d %%6.6s %%6d %%6d %%6d %%6d %%6d %%6d %%6d %%6d %%6d %%6d %%s\n",
			maxlu, maxlu, maxla, maxla)

	for (u in userlist) {
		for (a in userlist[u]) {
			userid = userlist[u][a]
			account = accountlist[u][a]
			if (length(gname)>0 && gname !~ account) continue # Proceed for specified account only
			totalusers++
			if (account_totals_only==0) {
				if (reason_print == 0)
					printf(fmt, 
					userid, account, running[u][a], runprocs[u][a], cpulimits[u][a], idle[u][a], idleprocs[u][a],
					fullname[userid])
				else
					printf(reasonfmt, 
					userid, account, running[u][a], runprocs[u][a], cpulimits[u][a], idle[u][a], idleprocs[u][a],
					Priority[u][a], Priority_procs[u][a], Dependency[u][a], Dependency_procs[u][a],
					CpuLimit[u][a], CpuLimit_procs[u][a], Held[u][a], Held_procs[u][a],
					fullname[userid])
			}
			# Accumulate account statistics
			accounts[account] = account
			accountusers[account]++
			account_running[account] += running[u][a]
			account_runprocs[account] += runprocs[u][a]
			account_idle[account] += idle[u][a]
			account_idleprocs[account] += idleprocs[u][a]
			if (reason_print == 1) {
				account_Dependency[account] += Dependency[u][a]
				account_Dependency_procs[account] += Dependency_procs[u][a]
				account_Priority[account] += Priority[u][a]
				account_Priority_procs[account] += Priority_procs[u][a]
				account_CpuLimit[account] += CpuLimit[u][a]
				account_CpuLimit_procs[account] += CpuLimit_procs[u][a]
				account_Held[account] += Held[u][a]
				account_Held_procs[account] += Held_procs[u][a]
			}
		}
	}
	if (userselect > 0) exit	# Finished (username specified)

	# Account info format string
	accountfmt = "Running+Pending=%d CPUs, %d users"
	for (acct in accounts) {
		accountinfo = sprintf(accountfmt, account_runprocs[acct]+account_idleprocs[acct], accountusers[acct])
		u = "ACCT_TOTAL"
		if (cpulimits[u][acct] == "") cpulimits[u][acct]	= "Inf"	# The default limit
		if (reason_print == 0)
			printf(fmt, 
			u, acct, account_running[acct], account_runprocs[acct], cpulimits[u][acct], account_idle[acct], account_idleprocs[acct],
			accountinfo)
		else
			printf(reasonfmt, 
			u, acct, account_running[acct], account_runprocs[acct], cpulimits[u][acct], account_idle[acct], account_idleprocs[acct],
			account_Priority[acct], account_Priority_procs[acct], account_Dependency[acct], account_Dependency_procs[acct],
			account_CpuLimit[acct], account_CpuLimit_procs[acct], account_Held[acct], account_Held_procs[acct],
			accountinfo)
	}
	if (length(gname) > 0) exit	# Finished (account specified)

	accountinfo = sprintf(accountfmt, totalrunprocs+totalidleprocs, totalusers)
	u = "ACCT_TOTAL"
	acct = "root"
	if (cpulimits[u][acct] == "") cpulimits[u][acct]	= "Inf"	# The default limit
	if (reason_print == 0)
		printf(fmt, 
		"GRAND_TOTAL", "ALL", totalrun, totalrunprocs, cpulimits[u][acct], totalidle, totalidleprocs, 
		accountinfo)
	else
		printf(reasonfmt, 
		"GRAND_TOTAL", "ALL", totalrun, totalrunprocs, cpulimits[u][acct], totalidle, totalidleprocs, 
		totalPriority, totalPriority_procs, totalDependency, totalDependency_procs,
		totalCpuLimit, totalCpuLimit_procs, totalHeld, totalHeld_procs,
		accountinfo)
}' | env LC_ALL=C sort $SORT_SEP -r -n -k 4 -k 6 -k 1d

# The sort command sorts number of running procs in descending order on keys 4,6 and alphabetical sort on key 1
# The LC_ALL=C ensures that Upper case is sorted before lower case.
